(0.532-0.47)/0.47
(0.654-0.61)/0.61
modelString <- "
model {
# Priors for beta_ik and lambda_gk
for (i in 1:N) {
for (k in 1:K) {
beta[i,k] ~ dnorm(0, 1) # Normal prior for demonstration
}
}
for (g in 1:G) {
for (k in 1:K) {
lambda[g,k] ~ dinvgamma(0.01, 0.01) # Inverse-gamma prior for demonstration
}
}
# The model for gene expression
for (i in 1:N) {
for (g in 1:G) {
mu[i,g] <- sum(x[i,g,k] * beta[i,k] for k in 1:K)
y[i,g] ~ dnorm(mu[i,g], lambda[g,k])
}
}
# Known fixed value of phi, used somewhere in your model calculations
phi <- 0.7
}
"
# Write the model to a file
writeLines(modelString, con = "model.jags")
# Assume your data is structured as follows:
data <- list(
y = matrix(runif(N * G), nrow = N),  # Random data; replace with your actual data
x = array(runif(N * G * K), dim = c(N, G, K)),  # Random x values; replace with your actual data
N = 100,  # Number of spots
G = 10,   # Number of genes
K = 5     # Number of cell types
)
data <- list(
y = matrix(runif(N * G), nrow = N),  # Random data; replace with your actual data
x = array(runif(N * G * K), dim = c(N, G, K)),  # Random x values; replace with your actual data
N = 100,  # Number of spots
G = 10,   # Number of genes
K = 5     # Number of cell types
)
data <- list(
N = 100,  # Number of spots
G = 10,   # Number of genes
K = 5     # Number of cell types
y = matrix(runif(N * G), nrow = N),  # Random data; replace with your actual data
# Assume your data is structured as follows:
data <- list(
N = 100,  # Number of spots
G = 10,   # Number of genes
K = 5  ,   # Number of cell types
y = matrix(runif(N * G), nrow = N),  # Random data; replace with your actual data
x = array(runif(N * G * K), dim = c(N, G, K)) # Random x values; replace with your actual data
)
library(rjags)
install.packages("rjags")
library(rjags)
# Assume your data is structured as follows:
data <- list(
N = 100,  # Number of spots
G = 10,   # Number of genes
K = 5  ,   # Number of cell types
y = matrix(runif(N * G), nrow = N),  # Random data; replace with your actual data
x = array(runif(N * G * K), dim = c(N, G, K)) # Random x values; replace with your actual data
)
library(rjags)
// Save this code in a file called 'normal_model.stan'
data {
data {
library(rstan)
setwd("D:/TJJtopic/STged/Package/code")
library("devtools")
library("roxygen2")
#
create("STged)
#
create("STged")
#
create("STged")
setwd("D:\TJJtopic\STged\Package")
setwd("D:/TJJtopic/STged/Package")
load("D:/TJJtopic/STged/Package/data/Fishplus.RDATA")
spot_exp
sc_label
spot_loc
View(beta)
load("D:/TJJtopic/STged/Package/data/Fishplus.RDATA")
View(sc_exp)
View(sc_exp)
load("D:/TJJtopic/STged/Package - 副本/data/PDAC.RData")
load("D:/TJJtopic/STged/Package/data/Fishplus.RDATA")
load("D:/TJJtopic/STged/Package/data/Fishplus.RDATA")
save(sc_exp, sc_label, spot_exp, spot_loc,beta,file = "Fishplus.RData")
save(sc_exp, sc_label, spot_exp, spot_loc,beta,file = "Fishplus.RData")
