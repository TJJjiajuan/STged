(0.532-0.47)/0.47
(0.654-0.61)/0.61
modelString <- "
model {
# Priors for beta_ik and lambda_gk
for (i in 1:N) {
for (k in 1:K) {
beta[i,k] ~ dnorm(0, 1) # Normal prior for demonstration
}
}
for (g in 1:G) {
for (k in 1:K) {
lambda[g,k] ~ dinvgamma(0.01, 0.01) # Inverse-gamma prior for demonstration
}
}
# The model for gene expression
for (i in 1:N) {
for (g in 1:G) {
mu[i,g] <- sum(x[i,g,k] * beta[i,k] for k in 1:K)
y[i,g] ~ dnorm(mu[i,g], lambda[g,k])
}
}
# Known fixed value of phi, used somewhere in your model calculations
phi <- 0.7
}
"
# Write the model to a file
writeLines(modelString, con = "model.jags")
# Assume your data is structured as follows:
data <- list(
y = matrix(runif(N * G), nrow = N),  # Random data; replace with your actual data
x = array(runif(N * G * K), dim = c(N, G, K)),  # Random x values; replace with your actual data
N = 100,  # Number of spots
G = 10,   # Number of genes
K = 5     # Number of cell types
)
data <- list(
y = matrix(runif(N * G), nrow = N),  # Random data; replace with your actual data
x = array(runif(N * G * K), dim = c(N, G, K)),  # Random x values; replace with your actual data
N = 100,  # Number of spots
G = 10,   # Number of genes
K = 5     # Number of cell types
)
data <- list(
N = 100,  # Number of spots
G = 10,   # Number of genes
K = 5     # Number of cell types
y = matrix(runif(N * G), nrow = N),  # Random data; replace with your actual data
# Assume your data is structured as follows:
data <- list(
N = 100,  # Number of spots
G = 10,   # Number of genes
K = 5  ,   # Number of cell types
y = matrix(runif(N * G), nrow = N),  # Random data; replace with your actual data
x = array(runif(N * G * K), dim = c(N, G, K)) # Random x values; replace with your actual data
)
library(rjags)
install.packages("rjags")
library(rjags)
# Assume your data is structured as follows:
data <- list(
N = 100,  # Number of spots
G = 10,   # Number of genes
K = 5  ,   # Number of cell types
y = matrix(runif(N * G), nrow = N),  # Random data; replace with your actual data
x = array(runif(N * G * K), dim = c(N, G, K)) # Random x values; replace with your actual data
)
library(rjags)
// Save this code in a file called 'normal_model.stan'
data {
data {
library(rstan)
setwd("D:/TJJtopic/STged/Package/code")
library("devtools")
library("roxygen2")
#
create("STged)
#
create("STged")
#
create("STged")
setwd("D:\TJJtopic\STged\Package")
setwd("D:/TJJtopic/STged/Package")
setwd("D:/TJJtopic/STged/Package")
devtools::has_devel()
devtools::load_all()
devtools::build()
devtools::build()
devtools::check()
devtools::document()
devtools::build_manual()
devtools::has_devel()
devtools::load_all()
devtools::build()
devtools::check()
source("D:/TJJtopic/STged/Package/R/data.R")
data(Fish+data)
devtools::has_devel()
devtools::load_all()
devtools::build()
devtools::check()
devtools::document()
load("D:/TJJtopic/STged/Package/data/Fishplus.RDATA")
data(Fishplus)
load("D:/TJJtopic/STged/Package/data/Fishplus.RDATA")
devtools::has_devel()
devtools::load_all()
devtools::build()
devtools::check()
source("D:/TJJtopic/STged/Package/R/data.R")
devtools::has_devel()
devtools::load_all()
devtools::build()
devtools::check()
devtools::document()
devtools::build_manual()
devtools::has_devel()
devtools::load_all()
devtools::build()
devtools::check()
devtools::document()
devtools::build_manual()
devtools::has_devel()
devtools::load_all()
devtools::build()
devtools::check()
devtools::document()
devtools::build_manual()
library("devtools")
library("roxygen2")
setwd("D:/TJJtopic/STged/Package")
create("STged")
devtools::has_devel()
devtools::load_all()
devtools::check()
devtools::build()
devtools::check()
library(usethis)
use_data_raw()
load("D:/TJJtopic/STged/Package/data/Fishplus.RDATA")
usethis::use_data(Fishplus, overwrite = TRUE)
load("D:/TJJtopic/STged/Package/data/Fishplus.RDATA")
remove(list =ls())
ls()
library("devtools")
library("roxygen2")
devtools::has_devel()
devtools::load_all()
STged
devtools::has_devel()
devtools::load_all()
devtools::build()
devtools::check()
devtools::document()
devtools::build_manual()
rlang::last_trace()
rlang::last_trace(drop = FALSE)
devtools::has_devel()
devtools::has_devel()
devtools::load_all()
devtools::build()
devtools::check()
source("D:/TJJtopic/STged/Package/R/utils.R")
devtools::has_devel()
devtools::load_all()
devtools::build()
devtools::check()
devtools::has_devel()
devtools::load_all()
devtools::build()
devtools::check()
devtools::document()
devtools::has_devel()
devtools::load_all()
devtools::build()
devtools::build()
devtools::check()
devtools::build_manual()
setwd("D:/TJJtopic/STged/Package")
knitr::opts_chunk$set(echo = TRUE)
#Please check the environment on you PC
python_env <- 'D:/Users/tujia/anaconda3/envs/ccnet/python.exe'
reticulate::use_python(python = python_env, required = TRUE)
anndata <- reticulate::import("anndata")
np <- reticulate::import("numpy")
sq <- reticulate::import("squidpy")
devtools::install_github("TJJjiajuan/STged")
library(STged)
# load data sets
data(Fishplus)
dim(sc_exp)
unique(sc_label)
dim(spot_exp)
head(spot_loc)
datax = data_process(sc_exp = sc_exp, sc_label = sc_label,
spot_exp = spot_exp, spot_loc = spot_loc,
depthscale = 1, gene_det_in_min_cells_per = 0.01,
expression_threshold = 0,nUMI =  100, verbose = FALSE,
clean.only = FALSE)
## Winsorize expression values to prevent outliers
truncate = FALSE
if(truncate){
qt = 0.0001
datax$sc_exp  =  winsorize(x =  datax$sc_exp, qt = qt)
datax$spot_exp  =  winsorize(x =  datax$spot_exp, qt = qt)
}
cat("Construct spatial correlation", "\n")
L.mat = dis_weight(spot_loc = datax$spot_loc, spot_exp = datax$spot_exp, k = 6,
quantile_prob_bandwidth = 1/3, method = "Hex",
coord_type = "grid")
#  devtools::install_github("TJJjiajuan/STged")
library(STged)
# load data sets
data(Fishplus)
dim(sc_exp)
unique(sc_label)
dim(spot_exp)
head(spot_loc)
datax = data_process(sc_exp = sc_exp, sc_label = sc_label,
spot_exp = spot_exp, spot_loc = spot_loc,
depthscale = 1, gene_det_in_min_cells_per = 0.01,
expression_threshold = 0,nUMI =  100, verbose = FALSE,
clean.only = FALSE)
## Winsorize expression values to prevent outliers
truncate = FALSE
if(truncate){
qt = 0.05
datax$sc_exp  =  winsorize(x =  datax$sc_exp, qt = qt)
datax$spot_exp  =  winsorize(x =  datax$spot_exp, qt = qt)
}
cat("Construct spatial correlation", "\n")
L.mat = dis_weight(spot_loc = datax$spot_loc, spot_exp = datax$spot_exp, k = 6,
quantile_prob_bandwidth = 1/3, method = "Hex",
coord_type = "grid")
cat("Construct reference gene matrix", "\n")
ref_exp = create_group_exp(sc_exp = datax$sc_exp, sc_label = datax$sc_label)
#the corresponding cell type proportion
beta =  beta[colnames(datax$spot_exp),]
cat("Run the STged", "\n")
start_time <- Sys.time()
stged.est = MLP.STged(srt_exp = datax$spot_exp, ref_exp = ref_exp, beta.type = beta,  w = L.mat$dis_weight, lambda1 = NULL, lambda2 = NULL,  cutoff = 0.05, epsilon = 1e-5,
maxiter = 100)
cat("Run the STged", "\n")
start_time <- Sys.time()
stged.est = MUR.STged(srt_exp = datax$spot_exp, ref_exp = ref_exp, beta.type = beta,  w = L.mat$dis_weight, lambda1 = NULL, lambda2 = NULL,  cutoff = 0.05, epsilon = 1e-5,
maxiter = 100)
cat("Run the STged", "\n")
start_time <- Sys.time()
stged.est = MUR.STged(srt_exp = datax$spot_exp, ref_exp = ref_exp, beta.type = beta,  W = L.mat$dis_weight, lambda1 = NULL, lambda2 = NULL,  cutoff = 0.05, epsilon = 1e-5,
maxiter = 100)
end_time <- Sys.time()
cat("Run time of STged", end_time - start_time," seconds.\n")
rm(list = ls())
library(STged)
# load data sets
data(Fishplus)
dim(sc_exp)
unique(sc_label)
dim(spot_exp)
head(spot_loc)
clean.only = FALSE
depthscale  = 1e6
datax = data_process(sc_exp = sc_exp,   sc_label = sc_label,
spot_exp = spot_exp,  spot_loc = spot_loc,
depthscale = depthscale,  gene_det_in_min_cells_per = 0.01,
expression_threshold = 0,
nUMI =  100, verbose = FALSE, clean.only = clean.only)
## Winsorize expression values to prevent outliers
truncate = FALSE
if(truncate){
qt = 0.05
datax$sc_exp  =  winsorize(x =  datax$sc_exp, qt = qt)
datax$spot_exp  =  winsorize(x =  datax$spot_exp, qt = qt)
}
cat("Construct spatial correlation", "\n")
L.mat = dis_weight(spot_loc = datax$spot_loc, spot_exp = datax$spot_exp, k = 6,
quantile_prob_bandwidth = 1/3, method = "Hex",
coord_type = "grid")
cat("Construct reference gene matrix", "\n")
ref_exp = create_group_exp(sc_exp = datax$sc_exp, sc_label = datax$sc_label)
#the corresponding cell type proportion
beta =  beta[colnames(datax$spot_exp),]
cat("Run the STged", "\n")
start_time <- Sys.time()
stged.est = MUR.STged(srt_exp = datax$spot_exp, ref_exp = ref_exp, beta.type = beta,  W = L.mat$dis_weight, lambda1 = NULL, lambda2 = NULL,  cutoff = 0.05, epsilon = 1e-5,
maxiter = 100)
end_time <- Sys.time()
cat("Run time of STged", end_time - start_time," seconds.\n")
start_time <- Sys.time()
model.est = STged(sc_exp = sc_exp, sc_label = sc_label,
spot_exp = spot_exp, spot_loc = spot_loc,  beta = beta,
python_env = python_env,depthscale = 1e6,
knei = 6,  methodL =  "Hex",coord_type = "grid",
quantile_prob_bandwidth = 1/3,
lambda1 = NULL, lambda2 = NULL, cutoff = 0.05,
maxiter = 500,  epsilon = 1e-5)
python_env
python_env <- 'D:/Users/tujia/anaconda3/envs/ccnet/python.exe'
reticulate::use_python(python = python_env, required = TRUE)
start_time <- Sys.time()
model.est = STged(sc_exp = sc_exp, sc_label = sc_label,
spot_exp = spot_exp, spot_loc = spot_loc,  beta = beta,
python_env = python_env,depthscale = 1e6,
knei = 6,  methodL =  "Hex",coord_type = "grid",
quantile_prob_bandwidth = 1/3,
lambda1 = NULL, lambda2 = NULL, cutoff = 0.05,
maxiter = 500,  epsilon = 1e-5)
remove.packages("STged")
devtools::install_github("TJJjiajuan/STged")
devtools::install_github("TJJjiajuan/STged")
setwd("D:/TJJtopic/STged/Package")
knitr::opts_chunk$set(echo = TRUE)
#Please check the environment on you PC
python_env <- 'D:/Users/tujia/anaconda3/envs/ccnet/python.exe'
reticulate::use_python(python = python_env, required = TRUE)
anndata <- reticulate::import("anndata")
np <- reticulate::import("numpy")
sq <- reticulate::import("squidpy")
devtools::install_github("TJJjiajuan/STged")
library(STged)
# load data sets
data(Fishplus)
dim(sc_exp)
unique(sc_label)
dim(spot_exp)
head(spot_loc)
clean.only = FALSE
depthscale  = 1e6
datax = data_process(sc_exp = sc_exp,   sc_label = sc_label,
spot_exp = spot_exp,  spot_loc = spot_loc,
depthscale = depthscale,  gene_det_in_min_cells_per = 0.01,
expression_threshold = 0,
nUMI =  100, verbose = FALSE, clean.only = clean.only)
## Winsorize expression values to prevent outliers
truncate = FALSE
if(truncate){
qt = 0.05
datax$sc_exp  =  winsorize(x =  datax$sc_exp, qt = qt)
datax$spot_exp  =  winsorize(x =  datax$spot_exp, qt = qt)
}
cat("Construct spatial correlation", "\n")
L.mat = dis_weight(spot_loc = datax$spot_loc, spot_exp = datax$spot_exp, k = 6,
quantile_prob_bandwidth = 1/3, method = "Hex",
coord_type = "grid")
cat("Construct reference gene matrix", "\n")
ref_exp = create_group_exp(sc_exp = datax$sc_exp, sc_label = datax$sc_label)
#the corresponding cell type proportion
beta =  beta[colnames(datax$spot_exp),]
cat("Run the STged", "\n")
start_time <- Sys.time()
stged.est = MUR.STged(srt_exp = datax$spot_exp, ref_exp = ref_exp, beta.type = beta,  W = L.mat$dis_weight, lambda1 = NULL, lambda2 = NULL,  cutoff = 0.05, epsilon = 1e-5,
maxiter = 100)
end_time <- Sys.time()
cat("Run time of STged", end_time - start_time," seconds.\n")
start_time <- Sys.time()
model.est = STged(sc_exp = sc_exp, sc_label = sc_label,
spot_exp = spot_exp, spot_loc = spot_loc,  beta = beta,
python_env = python_env,depthscale = 1e6,
knei = 6,  methodL =  "Hex",coord_type = "grid",
quantile_prob_bandwidth = 1/3,
lambda1 = NULL, lambda2 = NULL, cutoff = 0.05,
maxiter = 500,  epsilon = 1e-5)
end_time <- Sys.time()
cat("Run time of STged", end_time - start_time," seconds.\n")
